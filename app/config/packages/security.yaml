security:
    enable_authenticator_manager: true

    # https://symfony.com/doc/current/security.html#registering-the-user-hashing-passwords
    password_hashers:
        Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface: 'auto'
        App\Users\Entity\User:
            algorithm: auto

    providers:
        frontend_user_provider:
            id: App\Core\Security\FrontendUserProvider
        backend_user_provider:
            id: App\Core\Security\BackendUserProvider

    # Firewalls
    firewalls:
        # activate different ways to authenticate
        # https://symfony.com/doc/current/security.html#the-firewall

        # https://symfony.com/doc/current/security/impersonating_user.html
        # switch_user: true
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false

        backend_firewall:
            host: '%app.backend.domain%'
            provider: backend_user_provider
            custom_authenticator: App\Core\Security\BackendLoginFormAuthenticator
            remember_me:
                secret: '%kernel.secret%'
                always_remember_me: true
            login_throttling: ~
            logout:
                path: backend_logout
                target: backend_index

        frontend_firewall:
            host: '%app.frontend.domain%'
            provider: frontend_user_provider
            custom_authenticator: App\Core\Security\FrontendLoginFormAuthenticator
            remember_me:
                secret: '%kernel.secret%'
                always_remember_me: true
            login_throttling: ~
            logout:
                path: frontend_user_logout
                target: frontend_index

    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:
        - { path: /login/, roles: PUBLIC_ACCESS, host: '%app.backend.domain%' }
        - { path: ^/, roles: IS_AUTHENTICATED_REMEMBERED, host: '%app.backend.domain%' }

    role_hierarchy:
        ROLE_ADMIN: ['ROLE_MANAGER_USERS', 'ROLE_MANAGER_QUESTIONS']

when@test:
    security:
        password_hashers:
            # By default, password hashers are resource intensive and take time. This is
            # important to generate secure password hashes. In tests however, secure hashes
            # are not important, waste resources and increase test times. The following
            # reduces the work factor to the lowest possible values.
            Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
                algorithm: auto
                cost: 4 # Lowest possible value for bcrypt
                time_cost: 3 # Lowest possible value for argon
                memory_cost: 10 # Lowest possible value for argon
