# This file is the entry point to configure your own services.
# Files in the packages/ subdirectory configure your dependencies.

# Put parameters here that don't need to change on each machine where the app is deployed
# https://symfony.com/doc/current/best_practices.html#use-parameters-for-application-configuration
parameters:
    # opcache preload
    container.dumper.inline_factories: true

    # Настройки приложения
    app.frontend.domain: '%env(APP_FRONTEND_DOMAIN)%'
    app.frontend.host: '%env(APP_FRONTEND_HOST)%'
    app.backend.domain: '%env(APP_BACKEND_DOMAIN)%'
    app.backend.host: '%env(APP_BACKEND_HOST)%'
    app.mediaUrl: '%env(APP_MEDIA_URL)%'
    app.mediaPath: '%env(APP_MEDIA_PATH)%'

services:
    # default configuration for services in *this* file
    _defaults:
        autowire: true      # Automatically injects dependencies in your services.
        autoconfigure: true # Automatically registers your services as commands, event subscribers, etc.

    # Ядро системы
    App\:
        resource: '../src/'
        exclude:
            - '../src/Kernel.php'

    App\Core\:
        resource: '../src/Core/'
        exclude:
            - '../src/Core/DataCollections/'
            - '../src/Core/Entity/'
            - '../src/Core/Event/'
            - '../src/Core/Dto/'
            - '../src/Core/Exception/'
            - '../src/Core/Pagination/'

    # Сервис отправки e-mail уведомлений
    App\Core\Service\Notification\EmailNotification\SimpleEmailNotification:
        arguments:
            $fromName: '%env(APP_EMAIL_FROM_NAME)%'
            $fromEmail: '%env(APP_EMAIL_FROM_EMAIL)%'
    App\Core\Service\Notification\EmailNotification\EmailNotificationInterface: '@App\Core\Service\Notification\EmailNotification\SimpleEmailNotification'

    App\Core\DataFixtures\ORM\:
        resource: '../src/Core/DataFixtures/ORM/'
        tags: [ 'doctrine.fixture.orm' ]

    App\Core\EventSubscriber\Traits\TimestampableEntityTraitSubscriber:
        tags:
            - { name: doctrine.event_subscriber, priority: 100, lazy: true }
    App\Core\EventSubscriber\Traits\BlameableEntityTraitSubscriber:
        tags:
            - { name: doctrine.event_subscriber, priority: 110, lazy: true }

    # Session Storage
    Symfony\Component\HttpFoundation\Session\Storage\Handler\PdoSessionHandler:
        arguments:
            - '%env(DATABASE_URL)%'

    # Модуль Users
    App\Users\:
        resource: '../src/Users/'
        exclude:
            - '../src/Users/DataCollections/'
            - '../src/Users/Entity/'
            - '../src/Users/Event/'
            - '../src/Users/Dto/'
            - '../src/Users/Message/'

    App\Users\DataFixtures\ORM\:
        resource: '../src/Users/DataFixtures/ORM/'
        tags: [ 'doctrine.fixture.orm' ]

    # Сервис генерации случайных паролей
    App\Users\Service\PasswordGenerate\SimplePasswordGenerate: ~
    App\Users\Service\PasswordGenerate\PasswordGenerateInterface: '@App\Users\Service\PasswordGenerate\SimplePasswordGenerate'

    # Модуль Questions
    App\Questions\:
        resource: '../src/Questions/'
        exclude:
            - '../src/Questions/DataCollections/'
            - '../src/Questions/Entity/'
            - '../src/Questions/Event/'
            - '../src/Questions/Dto/'

    App\Questions\DataFixtures\ORM\:
        resource: '../src/Questions/DataFixtures/ORM/'
        tags: [ 'doctrine.fixture.orm' ]

    # Сервис генерации slug
    App\Questions\Service\SlugGenerate\SimpleSlugGenerate: ~
    App\Questions\Service\SlugGenerate\SlugGenerateInterface: '@App\Questions\Service\SlugGenerate\SimpleSlugGenerate'

    # Event Listeners
    App\Questions\EventListener\CategoryListener:
        tags:
            - { name: doctrine.orm.entity_listener, event: postPersist, entity: App\Questions\Entity\Category\Category, lazy: true }
            - { name: doctrine.orm.entity_listener, event: preUpdate, entity: App\Questions\Entity\Category\Category, lazy: true }
    App\Questions\EventListener\QuestionListener:
        tags:
            - { name: doctrine.orm.entity_listener, event: prePersist, entity: App\Questions\Entity\Question\Question, lazy: true }
            - { name: doctrine.orm.entity_listener, event: postPersist, entity: App\Questions\Entity\Question\Question, lazy: true }
            - { name: doctrine.orm.entity_listener, event: preUpdate, entity: App\Questions\Entity\Question\Question, lazy: true }
